<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.wit.inspaction.user.mapper.UserMapper">

	<!-- 사전점검 항목 리스트 조회 -->
	<select id="selectCategoryList" resultType="UserDTO">
		SELECT  category_id AS categoryId
		        , category_nm AS categoryNm
		        , detail  
		        , imagePath
                , COALESCE(count, 0) count
                , (SELECT COUNT(company_id) FROM WIT.COMPANY WHERE category_id = A.category_id) companyCnt
        FROM  wit.category A 
        WHERE  A.END_DATE = '99991231'
	</select>
	
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectCompanyList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT category_id categoryId
		     ,company_id companyId
		     ,rate
		     ,company_nm companyNm
		FROM WIT.COMPANY 
		WHERE CATEGORY_ID = #{categoryId}
	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="generateReqNo" parameterType="java.util.HashMap" resultType="String">
		SELECT CONCAT(#{reqGubun}, DATE_FORMAT(SYSDATE(), '%Y%m%d'), 
		        LPAD(COALESCE(MAX(req_no_num) + 1, 1), 5, '0')) AS req_no
		FROM (
		    SELECT CAST(SUBSTRING(req_no, 10) AS UNSIGNED) AS req_no_num
		    FROM WIT.REQUEST100T
		    WHERE req_date >= CURDATE()
		) AS derived
	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectRequestList" parameterType="java.util.HashMap" resultType="UserDTO">
	SELECT A.REQ_NO reqNo
       ,A.REQ_GUBUN reqGubun
       ,A.REQ_DATE reqDate
       ,DATE_FORMAT(A.REQ_DATE, '%c월 %e일') AS reqDateInfo
       ,A.REQ_STATE reqState
       ,COALESCE(B.estimate_amount, "") AS estimateAmount
       ,CASE
            WHEN A.REQ_STATE = '01' THEN '견적요청' 
  			WHEN A.REQ_STATE = '02' THEN '진행요청'
            WHEN A.REQ_STATE = '03' THEN '진행중'
            WHEN A.REQ_STATE = '04' THEN '미참여'         
            ELSE A.REQ_STATE
        END AS reqStateNm
        ,A.REQ_STATE reqState
       ,A.company_id companyId
       ,A.category_id categoryId
       ,(SELECT category_nm FROM wit.category WHERE category_id = A.category_id) AS categoryNm 
       ,(SELECT COMPANY_nm FROM wit.company WHERE category_id = A.category_id AND company_id = A.company_id) AS companyNm
       ,(SELECT RATE FROM wit.company WHERE category_id = A.category_id AND company_id = A.company_id) AS rate
       ,A.req_contents reqContents
       ,A.seq
       ,  CASE
            WHEN TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()) <![CDATA[<=]]> 10 THEN '방금 전'
            WHEN TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()), '초 전')
            WHEN TIMESTAMPDIFF(MINUTE, A.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(MINUTE, A.REQ_DATE, NOW()), '분 전')
            WHEN TIMESTAMPDIFF(HOUR, A.REQ_DATE, NOW()) <![CDATA[<]]> 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, A.REQ_DATE, NOW()), '시간 전')
            ELSE CONCAT(TIMESTAMPDIFF(DAY, A.REQ_DATE, NOW()), '일 전')
       END AS timeAgo  
       	FROM WIT.REQUEST100T A , WIT.REQUEST110T B
	WHERE A.REQ_NO = B.REQ_NO 
	AND  A.SEQ = B.SEQ
    AND  B.END_DATE = '99991231'
	AND A.REQ_USER  = #{reqUser}	
	<if test="reqNo != null">
		AND A.REQ_NO = #{reqNo}
	</if>
	<if test="seq != null">
		AND A.SEQ = #{seq}
	</if>
	ORDER BY A.REQ_DATE DESC , A.category_id
	</select>
	
	
	<!--알림 리스트 조회 -->
	<select id="selectNoticeList" parameterType="java.util.HashMap" resultType="UserDTO">
	SELECT A.REQ_NO
      ,A.SEQ
      ,A.REQ_GUBUN reqGubun
      ,B.REQ_DATE reqDate
      ,A.REQ_STATE
      ,COALESCE(B.estimate_amount, "") AS estimateAmount
      ,B.estimate_contents estimateContents
      ,(SELECT category_nm FROM wit.category WHERE category_id = B.category_id) AS categoryNm 
       ,(SELECT COMPANY_nm FROM wit.company WHERE category_id = A.category_id AND company_id = B.company_id) AS companyNm
       ,  CASE
            WHEN TIMESTAMPDIFF(SECOND, B.REQ_DATE, NOW()) <![CDATA[<=]]> 10 THEN '방금 전'
            WHEN TIMESTAMPDIFF(SECOND, B.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(SECOND, B.REQ_DATE, NOW()), '초 전')
            WHEN TIMESTAMPDIFF(MINUTE, B.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(MINUTE, B.REQ_DATE, NOW()), '분 전')
            WHEN TIMESTAMPDIFF(HOUR, B.REQ_DATE, NOW()) <![CDATA[<]]> 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, B.REQ_DATE, NOW()), '시간 전')
            ELSE CONCAT(TIMESTAMPDIFF(DAY, B.REQ_DATE, NOW()), '일 전')
       END AS timeAgo  
       	FROM WIT.REQUEST100T A , WIT.REQUEST110T B
	WHERE A.REQ_NO = B.REQ_NO 
	AND  A.SEQ = B.SEQ
    AND  B.END_DATE = '99991231'
    AND B.REQ_STATE = '02'
	AND A.REQ_USER  = #{reqUser}	
	ORDER BY B.REQ_DATE DESC , A.category_id
	</select>
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertRequestInfo" parameterType="java.util.HashMap">
	INSERT INTO WIT.REQUEST100T (
        req_no,
        company_id,
        category_id,
        req_gubun,
        req_user,
        req_date,
        req_state,
        req_contents,
        seq
    ) 
    VALUES (
    
     <selectKey keyProperty="reqNo" resultType="string" order="BEFORE">
         (SELECT CONCAT(#{reqGubun}, DATE_FORMAT(SYSDATE(), '%Y%m%d'), 
                LPAD(COALESCE(MAX(req_no_num) + 1, 1), 5, '0')
        )
        FROM (
            SELECT CAST(SUBSTRING(req_no, 10) AS UNSIGNED) AS req_no_num
            FROM WIT.REQUEST100T
            WHERE req_date >= CURDATE()
        ) AS derived)
    </selectKey>
    
       #{reqNo}, 
        #{companyId},
        #{categoryId},
        #{reqGubun},  
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents},        
        #{seq}
    )
	</insert>
	
	<!-- 사전점검 항목 저장 -->
	<update id="updateRequestState" parameterType="java.util.HashMap">
		UPDATE WIT.REQUEST100T
		  SET req_state = #{reqState}
		     ,UPDATE_DT =  SYSDATE() 
		     ,UPDATE_USER = #{reqUser}
		WHERE REQ_NO =   #{reqNo}
		AND SEQ =  #{seq}
	</update>
	
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertHistoryRequest" parameterType="java.util.HashMap">
	INSERT INTO WIT.REQUEST110T (
        REQ_NO,
        SEQ,
        END_DATE,
        company_id,
        category_id,
        req_user,
        req_date,
        req_state,
        req_contents,
        estimate_amount,
        estimate_contents        
    ) 
    VALUES (
        #{reqNo},
        #{seq},
        '99991231',
        #{companyId},
        #{categoryId},
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents},
        #{estimateAmount},
        #{estimateContents}
                
    )
	</insert>
	
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertTotalRequestInfo" parameterType="java.util.HashMap">
	INSERT INTO WIT.REQUEST100T (
        req_no,
        company_id,
        category_id,
        req_gubun,
        req_user,
        req_date,
        req_state,
        req_contents,
        seq
    ) 
    VALUES (
       #{reqNo},
        #{companyId},
        #{categoryId},
        #{reqGubun},  
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents},        
        #{seq}
    )
	</insert>
	
	
</mapper>